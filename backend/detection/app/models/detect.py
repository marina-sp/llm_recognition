from typing import Union
import requests


def query_model(prompt: str) -> str:
    """
    Interacts with the API serving the LLM model.
    :param prompt: Complete prompt to be evaluated.
    :return: Boolean
    """
    llm_service_url = "http://mlflow:5678/generate"

    # Completions request
    response_completions = requests.get(
        url=llm_service_url,
        data={
            "prompt": prompt,
            "temperature": 0.1,
            "max_tokens": 1
        }
    )
    if response_completions.status_code == 200:
        print(f"Huggingface TGI response for completions: {response_completions}")

        # Use only the first completion candidate
        return response_completions.json()["response"]
    else:
        return ""


def create_full_prompt(text: str) -> str:
    """
    Insert the text that has to be evaluated into an appropriate context for LLM.
    :param text: pure input text
    :return: complete prompt for an LLM
    """
    instruction = (
        "Act like a linguist." +
        " You may only use 'yes', if you think that the text provided was generated by an algorithm, e.g. language model," +
        " and 'no', if it looks like a human-written text, as your answer."
    )
    question = "Is the following sentence AI-generated?"

    full_prompt = f"Instruction: {instruction}\nQuestion: {question}\nText: {text}"
    return full_prompt


def is_ai_generated(text: str) -> Union[bool, None]:
    """
    Evaluates if a given text is generated by AI.
    To do so, a query with a tailored prompt is sent to an LLM.
    :param text: Sequence to be evaluated.
    :return: Boolean, if the input text is likely to stem from AI.
    """
    full_prompt = create_full_prompt(text)
    model_response = query_model(full_prompt).lower()

    # Simple conversion of text response of an LLM to a binary decision.
    if "yes" in model_response:
        return True
    elif "no" in model_response:
        return False
    else:
        # return None in case of an uninformative query
        return None

